package main

import (
	"github.com/helmutkemper/iotmaker.webassembly/browser/factoryBrowser"
	"github.com/helmutkemper/iotmaker.webassembly/browser/html"
	"github.com/helmutkemper/iotmaker.webassembly/platform/components"
)

// Control Panel Example
//
// The range component contains two main HTML elements, one of type number, and the other of type range. When one
// changes, the other changes along with it, with the same value.
//
// This example shows how to change the behavior of a Range component to invert the values shown in the html input
// number and html input range components.

// ComponentControlPanel Create a component
type ComponentControlPanel struct {

	// Embeds component control
	components.Components

	// Panel Create a control panel
	Panel *ControlPanel `wasmPanel:"type:panel"`
}

func (e *ComponentControlPanel) Init() (panel *html.TagDiv, err error) {
	panel, err = e.Components.Init(e)
	return
}

// ControlPanel Defines the control panel body
type ControlPanel struct {

	// Header Sets title text, default:Control panel
	Header string `wasmPanel:"type:headerText;label:Control panel"`

	// Body Prepare the control panel body, one container per field
	Body *Body `wasmPanel:"type:panelBody"`
}

type Body struct {

	// BoatEffect Create the container named 'label:Boat dragging effect'
	BoatEffect *BoatAdjust `wasmPanel:"type:component;label:Boat dragging effect"`
}

// BoatAdjust Define the container named 'label:Boat dragging effect'
type BoatAdjust struct {

	// Dragging Creates a component of type range
	Dragging *DraggingEffect `wasmPanel:"type:range;label:effect"`
}

// DraggingEffect Defines the behavior of the components.Range component
type DraggingEffect struct {
	// Embeds the components.Range control
	components.Range

	// TagRange is an optional way to have a component reference `wasmPanel:"type:inputTagRange"`
	TagRange *html.TagInputRange `wasmPanel:"type:inputTagRange"`

	// TagNumber is an optional way to have a component reference `wasmPanel:"type:inputTagNumber"`
	TagNumber *html.TagInputNumber `wasmPanel:"type:inputTagNumber"`

	// Dragging can be float64 or int64 and defines the behavior of the component
	Dragging float64 `wasmPanel:"type:value;min:2;max:50;step:1;default:15"`

	// RangeChange Obscures the `event:input` used by the component to function correctly, using the `func:OnInput` function defined in the `OnChangeEvent` struct
	RangeChange *OnChangeEvent `wasmPanel:"type:listener;event:input;func:OnInput"`
}

// MathematicalFormula Defines a mathematical formula to invert the operation of the input number with the component's input range
func (e *DraggingEffect) MathematicalFormula(min, max, value float64) (result float64) {
	return (max - value) + min
}

// Init Defines the function called when the component is initialized. Remember that Init function inside struct is standard in go.
func (e *DraggingEffect) Init() {
	// This initialization changes the expected behavior of the component
	e.TagNumber.Value(e.MathematicalFormula(2, 50, e.TagRange.GetValue()))
	e.TagRange.Value(e.MathematicalFormula(2, 50, e.TagNumber.GetValue()))
}

// OnChangeEvent Defines the data to be captured when a listener even happens
type OnChangeEvent struct {

	// IsTrusted `wasmGet:"isTrusted"` indicates when the event is generated by a human user or a testing framework
	IsTrusted bool `wasmGet:"isTrusted"`

	// Type `wasmGet:"type"` is a property of the html component input
	Type string `wasmGet:"type"`

	// Value `wasmGet:"value"` is a property of the html component input
	Value float64 `wasmGet:"value"`

	// Min `wasmGet:"min"` is a property of some html components of type input
	Min float64 `wasmGet:"min"`

	// Max `wasmGet:"max"` is a property of some html components of type input
	Max float64 `wasmGet:"max"`
}

// OnInput  is the function called for the listener, defined in `RangeChange *OnChangeEvent` and its name was defined in `func:OnInput`
func (e *OnChangeEvent) OnInput(event OnChangeEvent, reference DraggingEffect) {
	// Defines which component generated the event and changes the opposite component
	switch event.Type {
	case "range":
		reference.TagNumber.Value(reference.MathematicalFormula(event.Min, event.Max, reference.TagRange.GetValue()))
	case "number":
		reference.TagRange.Value(reference.MathematicalFormula(event.Min, event.Max, reference.TagNumber.GetValue()))
	}
}

func main() {
	var err error
	var panel *html.TagDiv

	controlPanel := ComponentControlPanel{}
	if panel, err = controlPanel.Init(); err != nil {
		panic(err)
	}

	stage := factoryBrowser.NewStage()
	stage.Append(panel)

	done := make(chan struct{})
	done <- struct{}{}
}
