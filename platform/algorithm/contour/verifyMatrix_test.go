package contour

import (
	"testing"
)

func TestName(t *testing.T) {

	// 225,270,315
	// 180,  p,  0
	// 135, 90, 45

	data := &[][]any{
		//  1  2  3  4  5  6  7  8  9
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 0
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, // 1
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, // 2
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 3
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 4
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 5
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 6
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, // 7
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 0}, // 8
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 9
	}
	c := Contour{}
	c.verifyFunction = func(pMatrix *[][]any, x, y int) bool {
		return (*pMatrix)[y][x].(int) != 0
	}
	c.populateFunction = func(pData *[][]any, x, y int) {
		(*pData)[y][x] = 1
	}
	c.Init(data)
	c.Verify()

	data = &[][]any{
		//  1  2  3  4  5  6  7  8  9
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 0
		{0, 1, 1, 0, 0, 0, 0, 1, 1, 0}, // 1
		{0, 1, 0, 0, 0, 0, 0, 0, 1, 0}, // 2
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 3
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 4
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 5
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 6
		{0, 1, 0, 0, 0, 0, 0, 0, 1, 0}, // 7
		{0, 1, 1, 0, 0, 0, 0, 1, 1, 0}, // 8
		{0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 9
	}
	for y := 0; y != len(*data); y += 1 {
		for x := 0; x != len((*data)[0]); x += 1 {
			if (*data)[y][x] == 0 && c.data[y][x] != nil {
				t.FailNow()
			} else if (*data)[y][x] == 1 && c.data[y][x] == nil || (*data)[y][x] == 1 && c.data[y][x].(int) != 1 {
				t.FailNow()
			}

		}
	}

	return

}
